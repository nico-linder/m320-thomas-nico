@startuml M320-V3-StockPortfolio-SequenceDiagram

title Stock Portfolio System - Sequence Diagram\n**Use Case: Portfolio-Gesamtwert berechnen**

' Styling
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true

' ============================================================
' AKTEURE UND TEILNEHMER
' ============================================================
actor User as "Benutzer"
participant ":Main" as Main
participant ":Portfolio" as Portfolio
participant "stocks:List<Stock>" as StockList
participant ":Stock" as Stock
participant "exchange:StockExchange" as Exchange
participant ":NewYorkStockExchange" as NYSE

' ============================================================
' SZENARIO: Portfolio erstellen und Gesamtwert berechnen
' ============================================================

== Portfolio-Initialisierung ==

User -> Main: Startet Programm
activate Main

Main -> Main: displayMenu()
Main -> User: Zeigt Menü an

User -> Main: Wählt Option "1" (NYSE)
Main -> NYSE: new NewYorkStockExchange()
activate NYSE
return exchange-Instanz

Main -> Portfolio: new Portfolio(exchange)
activate Portfolio

Portfolio -> StockList: new ArrayList<Stock>()
activate StockList
return stocks-Liste

Portfolio -> Portfolio: this.exchange = exchange
return portfolio-Instanz

== Stocks hinzufügen ==

User -> Main: Wählt Option "2" (Stock hinzufügen)
Main -> Main: addStockToPortfolio(scanner, portfolio)

Main -> User: Fordert Stock-Name an
User -> Main: Eingibt "Microsoft"

Main -> User: Fordert Anzahl an
User -> Main: Eingibt "10"

Main -> Stock: new Stock("Microsoft", 10)
activate Stock
return stock-Instanz

Main -> Portfolio: addStock(stock)
activate Portfolio
Portfolio -> StockList: add(stock)
activate StockList
return
return

note right
  **Wiederholung für weitere Stocks:**
  Benutzer fügt mehrere Stocks hinzu
  (z.B. Apple: 5, Google: 2)
end note

Main -> User: "Stock erfolgreich hinzugefügt"

== Portfolio-Gesamtwert berechnen ==

User -> Main: Wählt Option "3" (Wert anzeigen)

Main -> Portfolio: getTotalValue()
activate Portfolio

Portfolio -> Portfolio: totalValue = 0.0

loop für jeden Stock in stocks
    Portfolio -> StockList: iterator.next()
    activate StockList
    return currentStock

    Portfolio -> Stock: getName()
    activate Stock
    return "Microsoft"

    Portfolio -> Stock: getQuantity()
    activate Stock
    return 10

    Portfolio -> Exchange: getPrice("Microsoft")
    activate Exchange

    note right of Exchange
      **Polymorphismus in Aktion:**
      Portfolio kennt nur das Interface.
      Tatsächliche Implementierung
      (NYSE oder Zurich) wird zur
      Laufzeit aufgerufen.
    end note

    Exchange -> NYSE: getPrice("Microsoft")
    activate NYSE

    NYSE -> NYSE: Preis-Lookup in Map
    note right: Findet "Microsoft" -> 100.0

    return 100.0
    return 100.0

    Portfolio -> Portfolio: totalValue += (10 × 100.0)
    note right: totalValue = 1000.0
end

note over Portfolio
  **Berechnungslogik:**
  totalValue = Σ (quantity × price)

  **Beispiel:**
  - Microsoft: 10 × $100.0 = $1000.0
  - Apple: 5 × $125.0 = $625.0
  - Google: 2 × $2500.0 = $5000.0
  **Gesamt: $6625.0**
end note

return 6625.0

Main -> User: Zeigt "Portfolio-Wert: $6625.0"

deactivate Main

== Alternative: Börse wechseln ==

User -> Main: Wählt Option "4" (Börse wechseln)
activate Main

Main -> Main: switchExchange(scanner, portfolio)
Main -> User: Zeigt verfügbare Börsen

User -> Main: Wählt "2" (Zurich)

Main -> Portfolio: setExchange(new ZurichStockExchange())
activate Portfolio

Portfolio -> Portfolio: this.exchange = zurichExchange
note right
  **Strategy Pattern:**
  Exchange wird zur Laufzeit
  ausgetauscht. Nächster Aufruf
  von getTotalValue() verwendet
  Zurich-Preise (CHF).
end note

return

Main -> User: "Börse gewechselt zu: Zurich"

deactivate Main

@enduml
