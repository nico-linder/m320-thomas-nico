@startuml Weather Information System Architecture

!define RECTANGLE class

skinparam classAttributeIconSize 0
skinparam classBackgroundColor #F0F8FF
skinparam classBorderColor #4682B4
skinparam arrowColor #4682B4

package "UI Layer" #FFFFE0 {
    class WeatherUI {
        - controller: WeatherController
        - scanner: Scanner
        - validationService: DataValidationService
        - running: boolean
        --
        + start(): void
        - printWelcomeMessage(): void
        - printMainMenu(): void
        - handleMainMenuChoice(): void
        - getWeatherForCity(): void
        - displayWeatherData(weather: WeatherData): void
        - manageFavorites(): void
        - viewHistory(): void
        - settings(): void
    }
}

package "Controller Layer" #E6F3FF {
    class WeatherController {
        - weatherApiService: WeatherApiService
        - validationService: DataValidationService
        - conversionService: TemperatureConversionService
        - favoriteCities: List<String>
        - weatherHistory: LinkedList<WeatherData>
        - preferredUnit: TemperatureUnit
        --
        + getWeatherForCity(cityName: String): WeatherData
        + addFavoriteCity(cityName: String): void
        + removeFavoriteCity(cityName: String): void
        + getFavoriteCities(): List<String>
        + getWeatherHistory(): List<WeatherData>
        + setPreferredTemperatureUnit(unit: String): void
        + clearHistory(): void
        + isServiceAvailable(): boolean
    }
}

package "Service Layer" #F0FFFF {
    class WeatherApiService {
        - mockData: Map<String, WeatherData>
        - random: Random
        --
        + fetchWeatherData(cityName: String): WeatherData
        - simulateNetworkDelay(): void
        - addRandomVariation(original: Temperature): Temperature
        + isServiceAvailable(): boolean
    }

    class DataValidationService {
        --
        + validateCityName(cityName: String): void
        + validateTemperatureUnit(unit: String): TemperatureUnit
        + validateMenuChoice(input: String, min: int, max: int): int
    }

    class TemperatureConversionService {
        --
        + convert(temp: Temperature, targetUnit: TemperatureUnit): Temperature
        + formatTemperature(temp: Temperature, includeUnit: boolean): String
    }
}

package "Model Layer" #FFE4E1 {
    class WeatherData {
        - city: City
        - temperature: Temperature
        - feelsLike: Temperature
        - description: String
        - humidity: int
        - windSpeed: double
        - pressure: int
        - timestamp: LocalDateTime
        --
        + getters...
        + toString(): String
    }

    class City {
        - name: String
        - country: String
        - latitude: double
        - longitude: double
        --
        + getters...
        + toString(): String
    }

    class Temperature {
        - value: double
        - unit: TemperatureUnit
        --
        + getValue(): double
        + getUnit(): TemperatureUnit
        + getValueInCelsius(): double
        + toString(): String
    }

    enum TemperatureUnit {
        CELSIUS
        FAHRENHEIT
        KELVIN
        --
        + getSymbol(): String
    }
}

package "Exception Layer" #FFF0F5 {
    class InvalidCityException {
        + InvalidCityException(message: String)
    }

    class ApiConnectionException {
        + ApiConnectionException(message: String)
    }

    class InvalidTemperatureUnitException {
        + InvalidTemperatureUnitException(message: String)
    }
}

class Main #D3D3D3 {
    + main(args: String[]): void
}

' Delegation relationships
Main ..> WeatherController : <<creates>>
Main ..> WeatherUI : <<creates>>

WeatherUI --> WeatherController : delegates to >
WeatherUI --> DataValidationService : uses >

WeatherController --> WeatherApiService : delegates API calls >
WeatherController --> DataValidationService : delegates validation >
WeatherController --> TemperatureConversionService : delegates conversion >

WeatherApiService ..> WeatherData : creates
WeatherApiService ..> ApiConnectionException : throws
WeatherApiService ..> InvalidCityException : throws

DataValidationService ..> InvalidCityException : throws
DataValidationService ..> InvalidTemperatureUnitException : throws
DataValidationService ..> TemperatureUnit : returns

TemperatureConversionService --> Temperature : works with
TemperatureConversionService --> TemperatureUnit : uses

WeatherController --> WeatherData : manages
WeatherController --> TemperatureUnit : uses

WeatherData --> City : contains
WeatherData --> Temperature : contains
Temperature --> TemperatureUnit : uses

note right of Main
  The main method only starts
  the application. All logic is
  delegated to other classes.
end note

note right of WeatherUI
  UI handles only user interaction.
  All business logic is delegated
  to the controller.
end note

note bottom of WeatherController
  Controller coordinates between
  UI and services. It delegates:
  - API calls to WeatherApiService
  - Validation to DataValidationService
  - Conversions to TemperatureConversionService
end note

@enduml